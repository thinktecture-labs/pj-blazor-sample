@using Microsoft.AspNetCore.Components.WebAssembly.Services
@using System.Reflection
@*<Router AppAssembly="@typeof(App).Assembly" AdditionalAssemblies="@lazyLoadedAssemblies" OnNavigateAsync="@OnNavigateAsync">*@
    <Router AppAssembly="@typeof(App).Assembly" AdditionalAssemblies="new[] { typeof(RuntimePerformance.Contributions.Contributions).Assembly,
                                  typeof(RuntimePerformance.Conferences.Conferences).Assembly }">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>


@*@code {
    [Inject] private LazyAssemblyLoader _assemblyLoader { get; set; } = default!;
    private List<Assembly> lazyLoadedAssemblies = new();

    private async Task OnNavigateAsync(NavigationContext args)
    {
        try
        {
            if (args.Path == "contributions")
            {
                var assemblies = await _assemblyLoader.LoadAssembliesAsync(new[] { "RuntimePerformance.Contributions.dll" });
                lazyLoadedAssemblies.AddRange(assemblies);
            }
            else if (args.Path == "conferences")
            {
                var assemblies = await _assemblyLoader.LoadAssembliesAsync(new[] { "RuntimePerformance.Conferences.dll" });
                lazyLoadedAssemblies.AddRange(assemblies);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: {Message}", ex.Message);
        }
    }
}*@